{"version":3,"sources":["components/ToDoForm.jsx","components/ToDo.jsx","App.js","reportWebVitals.js","index.js"],"names":["ToDoForm","addTask","useState","userInput","setUserInput","className","placeholder","value","onChange","e","target","onClick","ToDo","todo","editTask","removeTask","toggleTask","edit","setEdit","editField","setEditField","id","prev","SaveField","task","time","statusEl","success","style","color","App","setToDo","idTask","filter","item","map","statusTask","todoItem","createTime","Date","findEqualTask","find","String","alert","Math","random","toString","substr","getHours","getMinutes","getSeconds","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.66df63eb.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport \"./ToDoForm.scss\";\r\n\r\nconst ToDoForm = ({addTask}) => {\r\n\r\n    const [userInput, setUserInput] = useState(\"\")\r\n\r\n    //отслеживание данных ввода\r\n    const checkField = (e) => {\r\n        setUserInput(e.target.value)\r\n    }\r\n\r\n    //отправление данных ввода\r\n    const Submit = () => {\r\n        addTask(userInput)\r\n        setUserInput(\"\")\r\n    }\r\n\r\n    return (\r\n        <div className=\"TodoForm\">\r\n            <input\r\n                className=\"TodoForm__input\"\r\n                placeholder=\"Задачи...\"\r\n                value={userInput}\r\n                onChange={checkField}/>\r\n            <button className=\"TodoForm__btn\" onClick={Submit}>Добавить задачу</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ToDoForm;","import React, {useState} from \"react\";\r\nimport \"./ToDO.scss\";\r\nimport {BsPatchCheck, FcCancel, FiEdit, RiDeleteBin2Line} from \"react-icons/all\";\r\n\r\n\r\nconst ToDo = ({todo, editTask,  removeTask, toggleTask}) => {\r\n\r\n    const [edit, setEdit] = useState(false) //рендер нового поля для редактирования\r\n    const [editField, setEditField] = useState(\"\")\r\n\r\n\r\n    const SaveField = (todo) => {\r\n        editTask(todo.id, editField)\r\n        setEditField(\"\")\r\n\r\n        if (editField !==  \"\") {\r\n            setEdit(!edit)\r\n        }else {\r\n            setEdit(prev => prev)\r\n        }\r\n    }\r\n\r\n    const DeleteField = (task) => {\r\n        removeTask(task)\r\n    }\r\n\r\n    const EditField = () => {\r\n        setEdit(!edit)\r\n    }\r\n\r\n    //передача состояния выполненных задач\r\n    const toggleBtn = (id, statusEl) => {\r\n        toggleTask(id, statusEl)\r\n    }\r\n\r\n    return (\r\n        <div className=\"Todolist\">\r\n            {edit ?\r\n                (<div className=\"Todolist-edit\">\r\n                    <input\r\n                        onChange={(e) => setEditField(e.target.value) }\r\n                    />\r\n                    <button\r\n                        onClick={() => SaveField(todo)} >Сохранить\r\n                    </button>\r\n                </div>) :\r\n                (<p>{todo.task}</p>)\r\n            }\r\n            <span>{todo.time}</span>\r\n            <div className=\"Todolist-control\">\r\n                <FiEdit\r\n                    className=\"Todolist-control__edit control-btn\"\r\n                    onClick={() => EditField()}\r\n                />\r\n                <RiDeleteBin2Line\r\n                    className=\"Todolist-control__delete control-btn\"\r\n                    onClick={() => DeleteField(todo.id)}\r\n                />\r\n                <span onClick={() => toggleBtn(todo.id, todo.success)}>{\r\n                    todo.success ?\r\n                    <BsPatchCheck\r\n                        className=\"Todolist-control__delete control-btn\"\r\n                        style={{color: \"green\"}} /> :\r\n                    <FcCancel\r\n                        className=\"Todolist-control__delete control-btn\"\r\n                        style={{color: \"red\"}} />}\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ToDo;","\nimport './App.css';\nimport ToDoForm from \"./components/ToDoForm\";\nimport {useState} from \"react\";\nimport ToDo from \"./components/ToDo\";\n\nfunction App() {\n\n    const [todo, setToDo] = useState([]) //список задач\n\n    //функция добавления задачи\n    const addTask = (todoItem) => {\n        let createTime = new Date()\n        let findEqualTask = todo.find(task => task.task === String(todoItem))\n        //Проверка на пустую строку или одинаковую задачу\n        if (todoItem === \"\" || findEqualTask ){\n            return alert(\"Пустая строка или похожая задача\")\n        } else {\n            setToDo(prev =>[...prev,\n                {\n                    id: Math.random().toString(36).substr(2,9),\n                    task: todoItem,\n                    success: false,\n                    time: `${createTime.getHours()}:${createTime.getMinutes()}:${createTime.getSeconds()}`,\n                }\n            ])\n        }\n    }\n\n    //функция удаления задачи\n    const removeTask = (idTask) => {\n        setToDo(prev => prev.filter(item => item.id !== idTask))\n    }\n\n    //функция обновления задачи\n    const editTask = (id, editTask) => {\n        setToDo(  todo.map(item => {\n            if (item.id === id) {\n                        item.task = editTask\n                    }\n            return item\n        }))\n\n    }\n\n    const toggleTask = ( idTask ,statusTask) => {\n        setToDo(  todo.map(item => {\n            if (item.id === idTask) {\n                item.success = !statusTask\n            }\n            return item\n        }))\n    }\n\n    return (\n        <div className=\"App\">\n            <div className=\"App-header\">\n                <h1 className=\"App-header__title\">Список задач</h1>\n            </div>\n\n            <ToDoForm addTask={addTask}  />\n            <div className=\"App-content\">\n                {todo.map((item, index) =>\n                    <ToDo\n                        key={index}\n                        todo={item}\n                        editTask={editTask}\n                        removeTask={removeTask}\n                        toggleTask={toggleTask}\n                    />)}\n            </div>\n\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}